---
# export KUBE_APISERVER="https://172.20.0.113:6443"
#export KUBE_APISERVER="{{ KUBELET_API_SERVER }}"



- stat: path="{{ CERT_DIR_TMP }}/ca.pem"
  register: cert_stat

- name: Create kubelet bootstrapping kubeconfig
  when: cert_stat.stat.exists
  shell: "{{ item }}"
  args:
    chdir: "{{ role_path }}/../node/templates"
  with_items:
    - >-
      kubectl config set-cluster kubernetes
      --certificate-authority=/etc/kubernetes/ssl/ca.pem --embed-certs=true 
      --server={{KUBELET_API_SERVER}}  --kubeconfig=bootstrap.kubeconfig
    - >- 
      kubectl config set-credentials kubelet-bootstrap 
      --token={{BOOTSTRAP_TOKEN}} --kubeconfig=bootstrap.kubeconfig
    - >- 
      kubectl config set-context default 
      --cluster=kubernetes --user=kubelet-bootstrap 
      --kubeconfig=bootstrap.kubeconfig
    - kubectl config use-context default --kubeconfig=bootstrap.kubeconfig


- stat: path={{ role_path }}/../node/templates/kube-proxy.kubeconfig
  register: proxy_stat

- name: Create kube-proxy bootstrapping kubeconfig
  when: cert_stat.stat.exists
  shell: "{{ item }}"
  args:
    chdir: "{{ role_path }}/../node/templates"
  with_items:
    - >- 
      kubectl config set-cluster kubernetes  
      --certificate-authority=/etc/kubernetes/ssl/ca.pem 
      --embed-certs=true --server=${KUBE_APISERVER} 
      --kubeconfig=kube-proxy.kubeconfig
    - >- 
      kubectl config set-credentials kube-proxy 
      --client-certificate=/etc/kubernetes/ssl/kube-proxy.pem 
      --client-key=/etc/kubernetes/ssl/kube-proxy-key.pem 
      --embed-certs=true --kubeconfig=kube-proxy.kubeconfig
    - >-
      kubectl config set-context default 
      --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig
    - kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
